/**
 * Auto-Generated Database Types
 *
 * This file will be generated by Supabase CLI after migrations are run.
 * For now, providing a minimal stub that will be replaced.
 *
 * To generate actual types:
 *   1. Run migrations in Supabase Studio
 *   2. Run: npx supabase gen types typescript --project-id <your-project-ref> > lib/supabase/database.types.ts
 *
 * For development, we're using the manual types in types.ts
 */

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export interface Database {
  public: {
    Tables: {
      difficulty_parameters: {
        Row: {
          id: string
          model_id: string
          difficulty_level: string
          year_level: number
          sub_level: number
          parameters: Json
          created_at: string
          updated_at: string
          created_by: string | null
        }
        Insert: {
          id?: string
          model_id: string
          difficulty_level: string
          year_level: number
          sub_level: number
          parameters: Json
          created_at?: string
          updated_at?: string
          created_by?: string | null
        }
        Update: {
          id?: string
          model_id?: string
          difficulty_level?: string
          year_level?: number
          sub_level?: number
          parameters?: Json
          created_at?: string
          updated_at?: string
          created_by?: string | null
        }
      }
      characters: {
        Row: {
          id: string
          name: string
          gender: string | null
          cultural_context: string | null
          active: boolean
          created_at: string
          created_by: string | null
        }
        Insert: {
          id?: string
          name: string
          gender?: string | null
          cultural_context?: string | null
          active?: boolean
          created_at?: string
          created_by?: string | null
        }
        Update: {
          id?: string
          name?: string
          gender?: string | null
          cultural_context?: string | null
          active?: boolean
          created_at?: string
          created_by?: string | null
        }
      }
      items: {
        Row: {
          id: string
          name: string
          category: string
          pricing: Json
          themes: string[]
          active: boolean
          created_at: string
          updated_at: string
          created_by: string | null
        }
        Insert: {
          id?: string
          name: string
          category: string
          pricing: Json
          themes?: string[]
          active?: boolean
          created_at?: string
          updated_at?: string
          created_by?: string | null
        }
        Update: {
          id?: string
          name?: string
          category?: string
          pricing?: Json
          themes?: string[]
          active?: boolean
          created_at?: string
          updated_at?: string
          created_by?: string | null
        }
      }
      scenario_templates: {
        Row: {
          id: string
          theme: string
          format: string
          template_text: string
          template_data: Json | null
          active: boolean
          created_at: string
          updated_at: string
          created_by: string | null
        }
        Insert: {
          id?: string
          theme: string
          format: string
          template_text: string
          template_data?: Json | null
          active?: boolean
          created_at?: string
          updated_at?: string
          created_by?: string | null
        }
        Update: {
          id?: string
          theme?: string
          format?: string
          template_text?: string
          template_data?: Json | null
          active?: boolean
          created_at?: string
          updated_at?: string
          created_by?: string | null
        }
      }
      curated_mappings: {
        Row: {
          id: string
          model_id: string
          difficulty_param_id: string
          format: string
          theme: string
          weight: number
          active: boolean
          created_at: string
          updated_at: string
          created_by: string | null
        }
        Insert: {
          id?: string
          model_id: string
          difficulty_param_id: string
          format: string
          theme: string
          weight?: number
          active?: boolean
          created_at?: string
          updated_at?: string
          created_by?: string | null
        }
        Update: {
          id?: string
          model_id?: string
          difficulty_param_id?: string
          format?: string
          theme?: string
          weight?: number
          active?: boolean
          created_at?: string
          updated_at?: string
          created_by?: string | null
        }
      }
      generated_questions: {
        Row: {
          id: string
          question_text: string
          options: Json
          correct_index: number
          explanation: string | null
          curated_mapping_id: string | null
          difficulty_param_id: string | null
          model_id: string
          format: string
          theme: string
          generation_params: Json | null
          math_output: Json | null
          approved: boolean
          approved_at: string | null
          approved_by: string | null
          rejection_reason: string | null
          cognitive_load: number | null
          distractor_strategies: string[] | null
          created_at: string
          generation_time_ms: number | null
        }
        Insert: {
          id?: string
          question_text: string
          options: Json
          correct_index: number
          explanation?: string | null
          curated_mapping_id?: string | null
          difficulty_param_id?: string | null
          model_id: string
          format: string
          theme: string
          generation_params?: Json | null
          math_output?: Json | null
          approved?: boolean
          approved_at?: string | null
          approved_by?: string | null
          rejection_reason?: string | null
          cognitive_load?: number | null
          distractor_strategies?: string[] | null
          created_at?: string
          generation_time_ms?: number | null
        }
        Update: {
          id?: string
          question_text?: string
          options?: Json
          correct_index?: number
          explanation?: string | null
          curated_mapping_id?: string | null
          difficulty_param_id?: string | null
          model_id?: string
          format?: string
          theme?: string
          generation_params?: Json | null
          math_output?: Json | null
          approved?: boolean
          approved_at?: string | null
          approved_by?: string | null
          rejection_reason?: string | null
          cognitive_load?: number | null
          distractor_strategies?: string[] | null
          created_at?: string
          generation_time_ms?: number | null
        }
      }
    }
    Views: {
      v_difficulty_summary: {
        Row: {
          model_id: string
          config_count: number
          min_year: number
          max_year: number
          year_levels_covered: number
        }
      }
      v_mapping_coverage: {
        Row: {
          model_id: string
          format: string
          theme: string
          mapping_count: number
          active_count: number
        }
      }
      v_question_approval_stats: {
        Row: {
          model_id: string
          format: string
          total_generated: number
          approved_count: number
          pending_count: number
          avg_generation_time_ms: number
          avg_cognitive_load: number
        }
      }
    }
    Functions: {
      generate_default_mappings: {
        Args: {
          p_model_id: string
        }
        Returns: Array<{
          mapping_id: string
          difficulty_level: string
          format: string
          theme: string
        }>
      }
      get_balanced_questions: {
        Args: {
          p_year_level: number
          p_batch_size?: number
        }
        Returns: Array<Database['public']['Tables']['generated_questions']['Row']>
      }
      get_question_stats_by_model: {
        Args: Record<string, never>
        Returns: Array<{
          model_id: string
          total_questions: number
          approved_questions: number
          pending_questions: number
          approval_rate: number
          avg_generation_time_ms: number
          avg_cognitive_load: number
        }>
      }
    }
    Enums: {
      // Add enums here if any are defined in the schema
    }
  }
}
